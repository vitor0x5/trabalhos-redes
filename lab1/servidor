#!/usr/bin/env python3
import asyncio
from tcp import Servidor
import re

apelidosDicionario = dict([])


def validar_nome(nome):
    return re.match(br'^[a-zA-Z][a-zA-Z0-9_-]*$', nome) is not None

def validar_apelido(apelido):
    return apelido.upper() in apelidosDicionario

def sair(conexao):
    print(conexao, 'conexão fechada')
    conexao.fechar()


def dados_recebidos(conexao, dados):
    if dados == b'':
        return sair(conexao)
    
    apelido = conexao.get_apelido()

    while(dados.find(b"\n") != -1):
        mensagemEnviar = b""
        comando = dados.split(b'\n')
        mensagemCompleta = conexao.get_mensagem() + comando[0]
        if mensagemCompleta.startswith(b"PING"):
            args = mensagemCompleta.split(b" ")
            mensagemEnviar = b":server PONG server :" + args[1] + b"\n"

        elif mensagemCompleta.startswith(b"NICK"):
            args = mensagemCompleta.split(b" ")
            args[1] = args[1].replace(b"\r", b"")
            if(validar_nome(args[1])):
                print(validar_apelido(args[1]))
                if(validar_apelido(args[1])):
                    mensagemEnviar = b':server 433 %s %s :Nickname is already in use\r\n' % (apelido, args[1])
                else:
                    apelidosDicionario[args[1].upper()] = conexao
                    conexao.set_apelido(args[1])
                    if(apelido == b"*"):
                        mensagemEnviar = b':server 001 %s :Welcome\r\n' % args[1]
                        mensagemEnviar += b':server 422 %s :MOTD File is missing\r\n' % args[1]
                    else:
                        mensagemEnviar = b':%s NICK %s\r\n' % (apelido, args[1])

            else:
                mensagemEnviar = b":server 432 %s %s :Erroneous nickname\r\n" % (apelido, args[1])

        conexao.remover_comando()
        dados = dados.replace(comando[0] + b"\n", b"")
        print(mensagemEnviar)
        conexao.enviar(mensagemEnviar)  
    
    if dados != "":
        conexao.salvar_mensagem_incompleta(dados) 
        

def conexao_aceita(conexao):
    print(conexao, 'nova conexão')
    conexao.registrar_recebedor(dados_recebidos)


servidor = Servidor(6667)
servidor.registrar_monitor_de_conexoes_aceitas(conexao_aceita)
asyncio.get_event_loop().run_forever()
